// Vercel Serverless Function - T·ª± ƒë·ªông g·ª≠i tin nh·∫Øn Zalo
export default async function handler(req, res) {
    // Ch·ªâ cho ph√©p POST
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }

    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'POST');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    try {
        const { name, email, phone, area } = req.body;

        // T·∫°o tin nh·∫Øn cho Zalo
        const zaloMessage = `üîî ƒêƒÇNG K√ù T∆Ø V·∫§N M·ªöI

üë§ H·ªç v√† t√™n: ${name}
üìß Email: ${email}
üì± S·ªë ƒëi·ªán tho·∫°i: ${phone}
üìç Khu v·ª±c: ${area}

üí¨ Kh√°ch h√†ng mu·ªën ƒë∆∞·ª£c t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m Bio Amida v√† c∆° h·ªôi kinh doanh.

‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN')}`;

        // C·∫•u h√¨nh Zalo OA (thay b·∫±ng th√¥ng tin th·∫≠t c·ªßa b·∫°n)
        const ZALO_OA_ID = '3416749500273400315'; // OA ID c·ªßa b·∫°n
        const ZALO_ACCESS_TOKEN = process.env.ZALO_ACCESS_TOKEN || 'YOUR_ACTUAL_ACCESS_TOKEN_HERE'; // Thay b·∫±ng token th·∫≠t

        // G·ª≠i tin nh·∫Øn ƒë·∫øn Zalo OA
        if (ZALO_ACCESS_TOKEN) {
            try {
                const response = await fetch('https://openapi.zalo.me/v2.0/oa/message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'access_token': ZALO_ACCESS_TOKEN
                    },
                    body: JSON.stringify({
                        recipient: {
                            user_id: ZALO_OA_ID
                        },
                        message: {
                            text: zaloMessage
                        }
                    })
                });

                if (response.ok) {
                    console.log('‚úÖ G·ª≠i tin nh·∫Øn Zalo th√†nh c√¥ng');
                } else {
                    console.log('‚ùå L·ªói g·ª≠i tin nh·∫Øn Zalo:', response.status);
                }
            } catch (error) {
                console.log('‚ùå L·ªói k·∫øt n·ªëi Zalo:', error.message);
            }
        }

        // G·ª≠i email th√¥ng b√°o (t√πy ch·ªçn)
        const EMAIL_SERVICE = process.env.EMAIL_SERVICE;
        if (EMAIL_SERVICE === 'sendgrid' && process.env.SENDGRID_API_KEY) {
            try {
                const emailResponse = await fetch('https://api.sendgrid.com/v3/mail/send', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${process.env.SENDGRID_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        personalizations: [{
                            to: [{ email: process.env.ADMIN_EMAIL }]
                        }],
                        from: { email: process.env.FROM_EMAIL },
                        subject: 'üîî ƒêƒÉng K√Ω T∆∞ V·∫•n M·ªõi - Bio Amida',
                        content: [{
                            type: 'text/html',
                            value: `
                                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                                    <h2 style="color: #2c3e50;">üîî ƒêƒÇNG K√ù T∆Ø V·∫§N M·ªöI</h2>
                                    <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                                        <p><strong>üë§ H·ªç v√† t√™n:</strong> ${name}</p>
                                        <p><strong>üìß Email:</strong> ${email}</p>
                                        <p><strong>üì± S·ªë ƒëi·ªán tho·∫°i:</strong> ${phone}</p>
                                        <p><strong>üìç Khu v·ª±c:</strong> ${area}</p>
                                        <p><strong>‚è∞ Th·ªùi gian:</strong> ${new Date().toLocaleString('vi-VN')}</p>
                                    </div>
                                    <p><strong>üí¨ Nhu c·∫ßu:</strong> Kh√°ch h√†ng mu·ªën ƒë∆∞·ª£c t∆∞ v·∫•n v·ªÅ s·∫£n ph·∫©m Bio Amida v√† c∆° h·ªôi kinh doanh.</p>
                                    <hr style="margin: 20px 0;">
                                    <p style="color: #7f8c8d; font-size: 12px;">
                                        Tin nh·∫Øn n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ website Bio Amida.<br>
                                        Vui l√≤ng li√™n h·ªá kh√°ch h√†ng trong th·ªùi gian s·ªõm nh·∫•t.
                                    </p>
                                </div>
                            `
                        }]
                    })
                });

                if (emailResponse.ok) {
                    console.log('‚úÖ G·ª≠i email th√¥ng b√°o th√†nh c√¥ng');
                } else {
                    console.log('‚ùå L·ªói g·ª≠i email:', emailResponse.status);
                }
            } catch (error) {
                console.log('‚ùå L·ªói k·∫øt n·ªëi email:', error.message);
            }
        }

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        return res.status(200).json({
            success: true,
            message: 'ƒêƒÉng k√Ω th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t.',
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω ƒëƒÉng k√Ω:', error);
        return res.status(500).json({
            error: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau.',
            details: error.message
        });
    }
} 